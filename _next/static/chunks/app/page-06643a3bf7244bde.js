(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[931],{62898:function(e,n,t){"use strict";t.d(n,{Z:function(){return createLucideIcon}});var i=t(2265),s={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};let toKebabCase=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),createLucideIcon=(e,n)=>{let t=(0,i.forwardRef)(({color:t="currentColor",size:r=24,strokeWidth:a=2,absoluteStrokeWidth:c,children:o,...d},l)=>(0,i.createElement)("svg",{ref:l,...s,width:r,height:r,stroke:t,strokeWidth:c?24*Number(a)/Number(r):a,className:`lucide lucide-${toKebabCase(e)}`,...d},[...n.map(([e,n])=>(0,i.createElement)(e,n)),...(Array.isArray(o)?o:[o])||[]]));return t.displayName=`${e}`,t}},9865:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var i=t(62898);let s=(0,i.Z)("BookOpen",[["path",{d:"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z",key:"vv98re"}],["path",{d:"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z",key:"1cyq3y"}]])},83523:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var i=t(62898);let s=(0,i.Z)("ChevronDown",[["path",{d:"m6 9 6 6 6-6",key:"qrunsl"}]])},17158:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var i=t(62898);let s=(0,i.Z)("ChevronRight",[["path",{d:"m9 18 6-6-6-6",key:"mthhwq"}]])},84402:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var i=t(62898);let s=(0,i.Z)("Code2",[["path",{d:"m18 16 4-4-4-4",key:"1inbqp"}],["path",{d:"m6 8-4 4 4 4",key:"15zrgr"}],["path",{d:"m14.5 4-5 16",key:"e7oirm"}]])},92455:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var i=t(62898);let s=(0,i.Z)("Code",[["polyline",{points:"16 18 22 12 16 6",key:"z7tu5w"}],["polyline",{points:"8 6 2 12 8 18",key:"1eg1df"}]])},97332:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var i=t(62898);let s=(0,i.Z)("Database",[["ellipse",{cx:"12",cy:"5",rx:"9",ry:"3",key:"msslwz"}],["path",{d:"M3 5V19A9 3 0 0 0 21 19V5",key:"1wlel7"}],["path",{d:"M3 12A9 3 0 0 0 21 12",key:"mv7ke4"}]])},29409:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var i=t(62898);let s=(0,i.Z)("Settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]])},12654:function(e,n,t){Promise.resolve().then(t.bind(t,34123)),Promise.resolve().then(t.bind(t,94435)),Promise.resolve().then(t.bind(t,24093))},34123:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return CourseContent}});var i=t(57437),s=t(2265),r=t(29409),a=t(84402),c=t(9865),o=t(97332),d=t(62898);let l=(0,d.Z)("ChevronUp",[["path",{d:"m18 15-6-6-6 6",key:"153udz"}]]);var u=t(83523);let p={part1:{title:"第一部分: macOS上的现代C#开发环境：您的MacBook Pro已准备就绪",content:[{id:"1.1",title:"战略转型，而非平台放弃：Visual Studio for Mac的退役解读",content:"首先，需要正视一个事实：独立的Visual Studio for Mac IDE已于2024年8月31日正式退役，此后微软将不再为其提供支持或维护更新。然而，将此举解读为微软放弃macOS开发者是一个普遍的误解。实际上，这代表了一次深思熟虑的战略整合，其目标是将开发资源集中到一个真正统一的、跨平台的工具链上：Visual Studio Code。\n\n这一决策背后蕴含着对开发者生态更长远的积极信号。过去，维护两个功能齐全但代码库不同的IDE（Windows上的Visual Studio和独立的Visual Studio for Mac）耗费了大量资源，并且常常导致Mac版本的功能更新滞后。通过将资源全面投入到为VS Code打造的C#开发工具包（C# Dev Kit）中，微软正在使其工具策略与现代.NET的跨平台本质保持高度一致。",icon:(0,i.jsx)(r.Z,{className:"w-6 h-6"})},{id:"1.2",title:"首选工具链：Visual Studio Code与C# Dev Kit",content:'您在macOS上进行专业C#开发的现代化核心工具，是一个由多个扩展组成的强大套件，统称为C# Dev Kit。它并非单个插件，而是一整套协同工作的工具，旨在将VS Code提升为一个功能丰富的.NET集成开发环境。\n\n其核心组件包括：\n\n• **C# 扩展 (C# extension):** 这是基础，提供了核心的语言服务，如语法高亮、代码片段和基础的智能感知（IntelliSense）。\n• **C# Dev Kit 扩展 (C# Dev Kit extension):** 这是全新体验的核心。它借鉴了完整版Visual Studio的成熟理念，为VS Code带来了"解决方案资源管理器"（Solution Explorer）视图。\n• **IntelliCode for C# Dev Kit 扩展:** 这是一个可选但强烈推荐安装的AI辅助开发工具。',icon:(0,i.jsx)(a.Z,{className:"w-6 h-6"})},{id:"1.3",title:"macOS开发环境完整搭建指南",content:'在macOS上搭建.NET开发环境非常方便。如果您已经有了Homebrew和VS Code，这已经完成了一半的工作。以下是完整的步骤指南：\n\n**第1步：安装 .NET SDK**\n\n这是最核心的部分，包含了运行和构建C#项目所需的一切（编译器、运行时等）。\n\n通过 Homebrew 安装 .NET SDK (推荐):\n```bash\nbrew install dotnet\n```\n\n验证安装:\n```bash\ndotnet --version\n```\n您应该会看到类似 8.0.100 这样的输出。\n\n**第2步：为 VS Code 安装必要的扩展**\n\n打开VS Code，进入扩展市场，搜索并安装以下扩展：\n\n1. **C# Dev Kit (Microsoft 出品)**: 最重要的扩展包，会自动安装：\n   • C# 扩展: 提供核心的语言支持\n   • IntelliCode for C# Dev Kit: AI辅助的智能代码补全\n   • Solution Explorer: 项目解决方案视图\n\n2. **NuGet Gallery (可选，但推荐)**: 在VS Code中方便地搜索和管理项目依赖\n\n3. **REST Client (Humao 出品)**: 可以直接在VS Code里运行.http文件测试API接口\n\n**第3步：准备本地数据库**\n\n推荐方案：使用Docker运行SQL Server\n\n1. 安装 Docker Desktop for Mac\n2. 启动SQL Server容器:\n```bash\ndocker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=YourStrongPassword!" \\\n   -p 1433:1433 --name sql1 -d \\\n   mcr.microsoft.com/mssql/server:2022-latest\n```\n\n备选方案：使用PostgreSQL或SQLite\n```bash\n# PostgreSQL\nbrew install postgresql\n\n# SQLite (macOS通常自带)\nsqlite3 --version\n```\n\n**第4步：安装数据库管理工具**\n\nAzure Data Studio (推荐):\n```bash\nbrew install --cask azure-data-studio\n```\n\n**完整环境清单**\n✅ Homebrew (已安装)\n✅ VS Code (已安装)  \n➡️ 安装 .NET SDK: `brew install dotnet`\n➡️ 安装 VS Code 扩展: C# Dev Kit, REST Client\n➡️ 安装和运行数据库: 推荐用 Docker 启动 SQL Server\n➡️ 安装数据库GUI工具: 推荐 Azure Data Studio',icon:(0,i.jsx)(r.Z,{className:"w-6 h-6"})},{id:"1.4",title:"实践演练：创建第一个.NET项目",content:'完成环境搭建后，让我们立即创建一个简单的项目来验证环境是否工作正常。这个练习将让您熟悉.NET CLI和VS Code的基本工作流程。\n\n**步骤1：创建新的Web API项目**\n\n在终端中运行以下命令：\n```bash\n# 创建项目目录\nmkdir MyFirstDotNetApp\ncd MyFirstDotNetApp\n\n# 创建Web API项目\ndotnet new webapi -n MyFirstApi\ncd MyFirstApi\n```\n\n**步骤2：在VS Code中打开项目**\n\n```bash\ncode .\n```\n\n当VS Code打开后，您应该会看到：\n• 左侧出现"解决方案资源管理器"视图\n• C# Dev Kit自动识别项目结构\n• 底部状态栏显示项目信息\n\n**步骤3：运行项目**\n\n在VS Code的终端中运行：\n```bash\ndotnet run\n```\n\n您应该会看到类似这样的输出：\n```\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5000\n      Now listening on: https://localhost:5001\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shutdown.\n```\n\n**步骤4：测试API**\n\n打开浏览器访问：\n• https://localhost:5001/swagger - Swagger UI界面\n• https://localhost:5001/weatherforecast - 示例API端点\n\n**步骤5：探索项目结构**\n\n您会看到以下关键文件：\n• `Program.cs` - 应用程序入口点\n• `Controllers/WeatherForecastController.cs` - 示例控制器\n• `appsettings.json` - 配置文件\n• `MyFirstApi.csproj` - 项目文件\n\n**步骤6：修改代码并观察热重载**\n\n打开 `Controllers/WeatherForecastController.cs`，修改 `Summaries` 数组，添加一些新的天气描述。保存文件后，应用会自动重载，刷新浏览器即可看到变化。\n\n**故障排除提示**\n\n如果遇到问题：\n1. 确保.NET SDK已正确安装：`dotnet --version`\n2. 检查VS Code是否已安装C# Dev Kit扩展\n3. 确保项目文件夹在VS Code中正确打开\n4. 查看VS Code的"输出"面板获取详细错误信息\n\n这个简单的练习确认了您的macOS开发环境已经完全准备就绪，可以开始真正的C#/.NET开发之旅了！',icon:(0,i.jsx)(a.Z,{className:"w-6 h-6"})}]},part2:{title:"第二部分: 为资深Java开发者量身定制的C#/.NET课程",content:[{id:"tech-matrix",title:"技术栈转换矩阵",content:"以下是Java/Spring到C#/.NET的核心概念映射：\n\n| Java/Spring 概念 | C#/.NET 对等物 | 注释与解读 |\n|------------------|----------------|-----------|\n| Java Development Kit (JDK) | .NET SDK | 两者都是包含编译器、运行时和标准库的核心开发工具包 |\n| Maven / Gradle | NuGet | .NET的包管理器，用于管理项目依赖的第三方库 |\n| Spring Boot | ASP.NET Core | 用于构建Web应用和API的核心框架，理念高度相似 |\n| Spring @RestController | ASP.NET Core [ApiController] | 用于标记API控制器的类级别注解/特性 |\n| JPA / Hibernate | Entity Framework (EF) Core | .NET生态中占主导地位的对象关系映射（ORM）框架 |\n| JUnit / Mockito | xUnit / NUnit / Moq | .NET中主流的单元测试和模拟（Mock）框架 |",icon:(0,i.jsx)(c.Z,{className:"w-6 h-6"})},{id:"csharp-features",title:"模块一：精通C#语言——超越Java的语法边界",content:'本模块将集中火力攻克C#语言中三个最具颠覆性、且在Java中没有直接对等物的核心特性：\n\n**1. C#风格的封装：深入理解属性（Properties）**\n\n您在Java中早已习惯通过getX()和setX()方法来封装私有字段，这是一种遵循JavaBeans规范的命名约定。C#则将这一模式提升到了语言特性的层面：\n\n```csharp\npublic class Device\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    \n    // 包含逻辑的属性\n    private string _location;\n    public string Location\n    {\n        get { return _location; }\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException("Location cannot be empty.");\n            _location = value;\n        }\n    }\n    \n    // 只读属性\n    public string Description => $"Device: {Name} (ID: {Id})";\n}\n```\n\n**2. LINQ：您的全新超能力数据语言**\n\nLINQ（Language Integrated Query）是Java Streams API的究极进化版：\n\n```csharp\n// 查询语法 (类似SQL)\nvar highVoltageReadings = from r in readings\n                         where r.Voltage > 240.0\n                         orderby r.Timestamp descending\n                         select new { r.DeviceId, r.Voltage };\n\n// 方法语法 (流式API)\nvar highVoltageReadings = readings\n                        .Where(r => r.Voltage > 240.0)\n                        .OrderByDescending(r => r.Timestamp)\n                        .Select(r => new { r.DeviceId, r.Voltage });\n```\n\n**3. 异步编程范式：async 和 await**\n\nC#通过async和await关键字，提供了一套语言级的异步编程模型：\n\n```csharp\n[HttpGet("{id}")]\npublic async Task<ActionResult<AcurevReading>> GetReading(int id)\n{\n    // 这里的调用不会阻塞请求处理线程\n    var reading = await _context.AcurevReadings.FindAsync(id);\n    \n    if (reading == null)\n        return NotFound();\n        \n    return reading;\n}\n```',icon:(0,i.jsx)(a.Z,{className:"w-6 h-6"})},{id:"aspnet-core",title:"模块二：使用ASP.NET Core构建Web API",content:'本模块将您丰富的Spring Boot经验直接映射到ASP.NET Core：\n\n**应用程序的心跳：Program.cs与中间件管道**\n\n在现代.NET中，Program.cs是应用程序的唯一入口点，其角色非常类似于Spring Boot的main Application类：\n\n```csharp\nvar builder = WebApplication.CreateBuilder(args);\n\n// 服务注册 (依赖注入)\nbuilder.Services.AddDbContext<BMSDataContext>(options =>\n    options.UseNpgsql(connectionString));\nbuilder.Services.AddScoped<IGenericRepository<Device>, GenericRepository<Device>>();\n\nvar app = builder.Build();\n\n// 中间件管道 (类似Servlet过滤器链)\napp.UseExceptionHandler("/Error");\napp.UseHttpsRedirection();\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllers();\n\napp.Run();\n```\n\n**API端点：从@RestController到[ApiController]**\n\n```csharp\n[ApiController]\n[Route("api/[controller]")]\npublic class DevicesController : ControllerBase\n{\n    private readonly IGenericRepository<Device> _repository;\n    \n    public DevicesController(IGenericRepository<Device> repository)\n    {\n        _repository = repository;\n    }\n    \n    [HttpGet("{id}")]\n    public async Task<ActionResult<Device>> GetDevice(int id)\n    {\n        var device = await _repository.GetByIdAsync(id);\n        return device == null ? NotFound() : Ok(device);\n    }\n    \n    [HttpPost]\n    public async Task<ActionResult<Device>> CreateDevice(Device device)\n    {\n        await _repository.AddAsync(device);\n        return CreatedAtAction(nameof(GetDevice), new { id = device.Id }, device);\n    }\n}\n```\n\n**模型绑定与验证**\n\nASP.NET Core的模型绑定系统会自动将请求数据绑定到C#对象：\n\n```csharp\npublic class CreateDeviceRequest\n{\n    [Required(ErrorMessage = "设备名称不能为空")]\n    [StringLength(100, ErrorMessage = "设备名称不能超过100个字符")]\n    public string Name { get; set; } = string.Empty;\n    \n    [Range(1, int.MaxValue, ErrorMessage = "楼层必须大于0")]\n    public int Floor { get; set; }\n    \n    [EmailAddress(ErrorMessage = "请输入有效的邮箱地址")]\n    public string? ContactEmail { get; set; }\n}\n\n[HttpPost]\npublic async Task<ActionResult<Device>> CreateDevice([FromBody] CreateDeviceRequest request)\n{\n    // 如果模型验证失败，会自动返回400 Bad Request\n    if (!ModelState.IsValid)\n        return BadRequest(ModelState);\n        \n    var device = new Device\n    {\n        Name = request.Name,\n        Floor = request.Floor,\n        ContactEmail = request.ContactEmail\n    };\n    \n    await _repository.AddAsync(device);\n    return CreatedAtAction(nameof(GetDevice), new { id = device.Id }, device);\n}\n```',icon:(0,i.jsx)(r.Z,{className:"w-6 h-6"})},{id:"entity-framework",title:"模块三：使用Entity Framework Core与PostgreSQL进行数据持久化",content:'**DbContext：您通往数据库的门户**\n\n在EF Core中，DbContext类是您与数据库交互的核心，扮演着JPA中EntityManager的角色：\n\n```csharp\npublic class BMSDataContext : DbContext\n{\n    public BMSDataContext(DbContextOptions<BMSDataContext> options) : base(options) { }\n    \n    public DbSet<AcurevReading> AcurevReadings { get; set; }\n    public DbSet<Device> Devices { get; set; }\n    public DbSet<Building> Buildings { get; set; }\n    \n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // 配置实体关系\n        modelBuilder.Entity<Device>()\n            .HasOne(d => d.Building)\n            .WithMany(b => b.Devices)\n            .HasForeignKey(d => d.BuildingId);\n            \n        // 配置索引\n        modelBuilder.Entity<AcurevReading>()\n            .HasIndex(r => r.Timestamp)\n            .HasDatabaseName("IX_AcurevReading_Timestamp");\n            \n        // 配置数据类型\n        modelBuilder.Entity<AcurevReading>()\n            .Property(r => r.Voltage)\n            .HasPrecision(18, 2);\n    }\n}\n```\n\n**代码即模式：EF Core迁移工作流**\n\nEF Core提供了强大的迁移工具来版本控制数据库模式：\n\n```bash\n# 创建迁移\ndotnet ef migrations add AddDeviceLocation\n\n# 预览SQL脚本\ndotnet ef migrations script\n\n# 应用迁移\ndotnet ef database update\n\n# 回滚到特定迁移\ndotnet ef database update PreviousMigrationName\n```\n\n**强大且类型安全的查询：LINQ to Entities**\n\n```csharp\n// 基础查询\nvar device = await _context.Devices.FindAsync(id);\n\n// 复杂查询与投影\nvar deviceSummary = await _context.Devices\n    .Where(d => d.IsActive)\n    .Select(d => new DeviceSummaryDto\n    {\n        Id = d.Id,\n        Name = d.Name,\n        LastReading = d.AcurevReadings\n            .OrderByDescending(r => r.Timestamp)\n            .Select(r => r.Voltage)\n            .FirstOrDefault(),\n        ReadingCount = d.AcurevReadings.Count()\n    })\n    .ToListAsync();\n\n// 聚合查询\nvar buildingStats = await _context.Buildings\n    .GroupJoin(_context.Devices,\n        b => b.Id,\n        d => d.BuildingId,\n        (building, devices) => new\n        {\n            BuildingName = building.Name,\n            DeviceCount = devices.Count(),\n            ActiveDevices = devices.Count(d => d.IsActive)\n        })\n    .ToListAsync();\n\n// 分页查询\nvar pagedDevices = await _context.Devices\n    .OrderBy(d => d.Name)\n    .Skip((pageNumber - 1) * pageSize)\n    .Take(pageSize)\n    .ToListAsync();\n```\n\n**性能优化技巧**\n\n```csharp\n// 预加载相关数据 (Eager Loading)\nvar devicesWithBuildings = await _context.Devices\n    .Include(d => d.Building)\n    .Include(d => d.AcurevReadings.Take(10))\n    .ToListAsync();\n\n// 显式加载 (Explicit Loading)\nvar device = await _context.Devices.FindAsync(id);\nawait _context.Entry(device)\n    .Collection(d => d.AcurevReadings)\n    .LoadAsync();\n\n// 无跟踪查询 (提高只读查询性能)\nvar deviceNames = await _context.Devices\n    .AsNoTracking()\n    .Select(d => d.Name)\n    .ToListAsync();\n\n// 原始SQL查询 (复杂场景)\nvar result = await _context.AcurevReadings\n    .FromSqlRaw("SELECT * FROM AcurevReadings WHERE Voltage > {0}", threshold)\n    .ToListAsync();\n```',icon:(0,i.jsx)(o.Z,{className:"w-6 h-6"})},{id:"core-patterns",title:"模块四：实现项目中的核心模式",content:'**解构泛型仓储模式 (Generic Repository Pattern)**\n\n```csharp\npublic interface IGenericRepository<T> where T : class\n{\n    Task<T?> GetByIdAsync(int id);\n    Task<IEnumerable<T>> GetAllAsync();\n    Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);\n    Task AddAsync(T entity);\n    Task UpdateAsync(T entity);\n    Task RemoveAsync(T entity);\n    Task<int> CountAsync(Expression<Func<T, bool>>? predicate = null);\n}\n\npublic class GenericRepository<T> : IGenericRepository<T> where T : class\n{\n    private readonly BMSDataContext _context;\n    private readonly DbSet<T> _dbSet;\n\n    public GenericRepository(BMSDataContext context)\n    {\n        _context = context;\n        _dbSet = _context.Set<T>();\n    }\n\n    public async Task<T?> GetByIdAsync(int id)\n    {\n        return await _dbSet.FindAsync(id);\n    }\n\n    public async Task<IEnumerable<T>> GetAllAsync()\n    {\n        return await _dbSet.ToListAsync();\n    }\n\n    public async Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate)\n    {\n        return await _dbSet.Where(predicate).ToListAsync();\n    }\n\n    public async Task AddAsync(T entity)\n    {\n        await _dbSet.AddAsync(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task UpdateAsync(T entity)\n    {\n        _dbSet.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task RemoveAsync(T entity)\n    {\n        _dbSet.Remove(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task<int> CountAsync(Expression<Func<T, bool>>? predicate = null)\n    {\n        return predicate == null \n            ? await _dbSet.CountAsync() \n            : await _dbSet.CountAsync(predicate);\n    }\n}\n```\n\n**服务层模式与业务逻辑**\n\n```csharp\npublic interface IDeviceService\n{\n    Task<DeviceDto> GetDeviceAsync(int id);\n    Task<IEnumerable<DeviceDto>> GetActiveDevicesAsync();\n    Task<DeviceDto> CreateDeviceAsync(CreateDeviceRequest request);\n    Task<bool> UpdateDeviceStatusAsync(int id, bool isActive);\n}\n\npublic class DeviceService : IDeviceService\n{\n    private readonly IGenericRepository<Device> _deviceRepository;\n    private readonly ILogger<DeviceService> _logger;\n    private readonly IMapper _mapper;\n\n    public DeviceService(\n        IGenericRepository<Device> deviceRepository,\n        ILogger<DeviceService> logger,\n        IMapper mapper)\n    {\n        _deviceRepository = deviceRepository;\n        _logger = logger;\n        _mapper = mapper;\n    }\n\n    public async Task<DeviceDto> GetDeviceAsync(int id)\n    {\n        var device = await _deviceRepository.GetByIdAsync(id);\n        if (device == null)\n        {\n            _logger.LogWarning("Device with ID {DeviceId} not found", id);\n            throw new DeviceNotFoundException($"Device with ID {id} not found");\n        }\n\n        return _mapper.Map<DeviceDto>(device);\n    }\n\n    public async Task<IEnumerable<DeviceDto>> GetActiveDevicesAsync()\n    {\n        var devices = await _deviceRepository.FindAsync(d => d.IsActive);\n        return _mapper.Map<IEnumerable<DeviceDto>>(devices);\n    }\n\n    public async Task<DeviceDto> CreateDeviceAsync(CreateDeviceRequest request)\n    {\n        var device = _mapper.Map<Device>(request);\n        device.CreatedAt = DateTime.UtcNow;\n        device.IsActive = true;\n\n        await _deviceRepository.AddAsync(device);\n        _logger.LogInformation("Created new device: {DeviceName}", device.Name);\n\n        return _mapper.Map<DeviceDto>(device);\n    }\n}\n```\n\n**配置管理与选项模式**\n\n```csharp\n// appsettings.json\n{\n  "ConnectionStrings": {\n    "DefaultConnection": "Host=localhost;Database=BMS;Username=postgres;Password=password"\n  },\n  "BmsSettings": {\n    "MaxDevicesPerBuilding": 100,\n    "ReadingRetentionDays": 365,\n    "AlertThresholds": {\n      "HighVoltage": 250.0,\n      "LowVoltage": 200.0\n    }\n  }\n}\n\n// 配置类\npublic class BmsSettings\n{\n    public int MaxDevicesPerBuilding { get; set; }\n    public int ReadingRetentionDays { get; set; }\n    public AlertThresholds AlertThresholds { get; set; } = new();\n}\n\npublic class AlertThresholds\n{\n    public double HighVoltage { get; set; }\n    public double LowVoltage { get; set; }\n}\n\n// Program.cs 中注册\nbuilder.Services.Configure<BmsSettings>(\n    builder.Configuration.GetSection("BmsSettings"));\n\n// 在服务中使用\npublic class AlertService\n{\n    private readonly BmsSettings _settings;\n    \n    public AlertService(IOptions<BmsSettings> options)\n    {\n        _settings = options.Value;\n    }\n    \n    public bool IsVoltageHigh(double voltage)\n    {\n        return voltage > _settings.AlertThresholds.HighVoltage;\n    }\n}\n```\n\n**测试基础：xUnit与模拟**\n\n```csharp\npublic class DeviceServiceTests\n{\n    private readonly Mock<IGenericRepository<Device>> _mockRepository;\n    private readonly Mock<ILogger<DeviceService>> _mockLogger;\n    private readonly Mock<IMapper> _mockMapper;\n    private readonly DeviceService _service;\n\n    public DeviceServiceTests()\n    {\n        _mockRepository = new Mock<IGenericRepository<Device>>();\n        _mockLogger = new Mock<ILogger<DeviceService>>();\n        _mockMapper = new Mock<IMapper>();\n        _service = new DeviceService(_mockRepository.Object, _mockLogger.Object, _mockMapper.Object);\n    }\n\n    [Fact]\n    public async Task GetDeviceAsync_WithValidId_ReturnsDevice()\n    {\n        // Arrange\n        var deviceId = 1;\n        var device = new Device { Id = deviceId, Name = "Test Device" };\n        var deviceDto = new DeviceDto { Id = deviceId, Name = "Test Device" };\n\n        _mockRepository.Setup(r => r.GetByIdAsync(deviceId))\n            .ReturnsAsync(device);\n        _mockMapper.Setup(m => m.Map<DeviceDto>(device))\n            .Returns(deviceDto);\n\n        // Act\n        var result = await _service.GetDeviceAsync(deviceId);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(deviceId, result.Id);\n        Assert.Equal("Test Device", result.Name);\n    }\n\n    [Fact]\n    public async Task GetDeviceAsync_WithInvalidId_ThrowsException()\n    {\n        // Arrange\n        var deviceId = 999;\n        _mockRepository.Setup(r => r.GetByIdAsync(deviceId))\n            .ReturnsAsync((Device?)null);\n\n        // Act & Assert\n        await Assert.ThrowsAsync<DeviceNotFoundException>(\n            () => _service.GetDeviceAsync(deviceId));\n    }\n}\n```',icon:(0,i.jsx)(a.Z,{className:"w-6 h-6"})}]},part3:{title:"第三部分: 战略路线图与建议",content:[{id:"4-week-plan",title:"四周贡献计划",content:'**第一周：环境搭建与代码探索**\n\n**目标：** 成功在MacBook Pro上配置好开发环境，并能够运行和调试整个项目\n\n**具体任务：**\n• 完成 [环境搭建指南](/setup) 中的所有步骤\n• 克隆项目仓库并成功运行项目\n• 熟悉 VS Code + C# Dev Kit 的基本操作\n• 理解项目的整体架构和文件结构\n\n**学习重点：**\n• C# 属性 (Properties) vs Java getters/setters\n• LINQ 基础语法和概念\n• async/await 异步编程模式\n\n**实践练习：**\n```csharp\n// 练习1: 理解属性\npublic class Device\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    \n    // 计算属性\n    public string DisplayName => $"设备: {Name} (ID: {Id})";\n    \n    // 带验证的属性\n    private int _floor;\n    public int Floor \n    { \n        get => _floor;\n        set => _floor = value > 0 ? value : throw new ArgumentException("楼层必须大于0");\n    }\n}\n\n// 练习2: LINQ 查询\nvar activeDevices = devices\n    .Where(d => d.IsActive)\n    .OrderBy(d => d.Name)\n    .Select(d => new { d.Id, d.Name, d.Floor })\n    .ToList();\n\n// 练习3: 异步方法\npublic async Task<Device?> GetDeviceAsync(int id)\n{\n    return await _context.Devices.FindAsync(id);\n}\n```\n\n**本周目标：** 能够运行项目，理解基本的 C# 语法，并在现有代码中设置断点进行调试。\n\n---\n\n**第二周：您的第一个只读功能**\n\n**目标：** 实现一个新的GET端点，例如获取某个设备的历史读数统计\n\n**具体任务：**\n• 创建新的 DTO 类\n• 在 Controller 中添加新的 Action 方法\n• 使用 LINQ to Entities 编写数据库查询\n• 编写简单的单元测试\n\n**实践项目：设备统计API**\n```csharp\n// 1. 创建 DTO\npublic class DeviceStatsDto\n{\n    public int DeviceId { get; set; }\n    public string DeviceName { get; set; } = string.Empty;\n    public int TotalReadings { get; set; }\n    public double AverageVoltage { get; set; }\n    public double MaxVoltage { get; set; }\n    public double MinVoltage { get; set; }\n    public DateTime LastReading { get; set; }\n}\n\n// 2. 在 Controller 中添加端点\n[HttpGet("{id}/stats")]\npublic async Task<ActionResult<DeviceStatsDto>> GetDeviceStats(int id)\n{\n    var device = await _context.Devices\n        .Include(d => d.AcurevReadings)\n        .FirstOrDefaultAsync(d => d.Id == id);\n        \n    if (device == null)\n        return NotFound();\n        \n    var readings = device.AcurevReadings;\n    \n    var stats = new DeviceStatsDto\n    {\n        DeviceId = device.Id,\n        DeviceName = device.Name,\n        TotalReadings = readings.Count,\n        AverageVoltage = readings.Any() ? readings.Average(r => r.Voltage) : 0,\n        MaxVoltage = readings.Any() ? readings.Max(r => r.Voltage) : 0,\n        MinVoltage = readings.Any() ? readings.Min(r => r.Voltage) : 0,\n        LastReading = readings.Any() ? readings.Max(r => r.Timestamp) : DateTime.MinValue\n    };\n    \n    return Ok(stats);\n}\n\n// 3. 测试端点\n// GET /api/devices/1/stats\n```\n\n**学习重点：**\n• ASP.NET Core 路由系统\n• Entity Framework Include 和预加载\n• DTO 模式和数据映射\n• HTTP 状态码的正确使用\n\n---\n\n**第三周：您的第一个写入功能**\n\n**目标：** 实现一个POST或PUT端点，例如更新设备元数据或记录新的手动操作\n\n**具体任务：**\n• 实现数据验证和模型绑定\n• 理解 EF Core 的变更跟踪机制\n• 掌握事务和工作单元模式\n• 处理并发和异常情况\n\n**实践项目：设备维护记录API**\n```csharp\n// 1. 创建请求模型\npublic class CreateMaintenanceRequest\n{\n    [Required(ErrorMessage = "设备ID不能为空")]\n    public int DeviceId { get; set; }\n    \n    [Required(ErrorMessage = "维护类型不能为空")]\n    [StringLength(100, ErrorMessage = "维护类型不能超过100个字符")]\n    public string MaintenanceType { get; set; } = string.Empty;\n    \n    [StringLength(500, ErrorMessage = "描述不能超过500个字符")]\n    public string? Description { get; set; }\n    \n    [Required(ErrorMessage = "维护人员不能为空")]\n    public string Technician { get; set; } = string.Empty;\n}\n\n// 2. 创建实体\npublic class MaintenanceRecord\n{\n    public int Id { get; set; }\n    public int DeviceId { get; set; }\n    public string MaintenanceType { get; set; } = string.Empty;\n    public string? Description { get; set; }\n    public string Technician { get; set; } = string.Empty;\n    public DateTime CreatedAt { get; set; }\n    \n    // 导航属性\n    public Device Device { get; set; } = null!;\n}\n\n// 3. 实现 POST 端点\n[HttpPost("maintenance")]\npublic async Task<ActionResult<MaintenanceRecord>> CreateMaintenanceRecord(\n    [FromBody] CreateMaintenanceRequest request)\n{\n    // 验证设备是否存在\n    var device = await _context.Devices.FindAsync(request.DeviceId);\n    if (device == null)\n        return BadRequest($"设备 ID {request.DeviceId} 不存在");\n    \n    var record = new MaintenanceRecord\n    {\n        DeviceId = request.DeviceId,\n        MaintenanceType = request.MaintenanceType,\n        Description = request.Description,\n        Technician = request.Technician,\n        CreatedAt = DateTime.UtcNow\n    };\n    \n    _context.MaintenanceRecords.Add(record);\n    await _context.SaveChangesAsync();\n    \n    return CreatedAtAction(\n        nameof(GetMaintenanceRecord), \n        new { id = record.Id }, \n        record);\n}\n\n// 4. 实现 PUT 端点\n[HttpPut("{id}")]\npublic async Task<IActionResult> UpdateDevice(int id, [FromBody] UpdateDeviceRequest request)\n{\n    var device = await _context.Devices.FindAsync(id);\n    if (device == null)\n        return NotFound();\n    \n    // 更新属性\n    device.Name = request.Name;\n    device.Location = request.Location;\n    device.UpdatedAt = DateTime.UtcNow;\n    \n    // EF Core 自动跟踪更改\n    await _context.SaveChangesAsync();\n    \n    return NoContent();\n}\n```\n\n**学习重点：**\n• 数据验证特性 (Data Annotations)\n• EF Core 变更跟踪和 SaveChanges\n• HTTP 动词的正确使用 (POST vs PUT vs PATCH)\n• 错误处理和用户友好的错误消息\n\n---\n\n**第四周：测试与深化**\n\n**目标：** 为前两周开发的新功能编写单元测试，并深化对核心概念的理解\n\n**具体任务：**\n• 编写控制器和服务的单元测试\n• 理解依赖注入和模拟 (Mocking)\n• 学习集成测试的基础\n• 代码重构和性能优化\n\n**测试实践：**\n```csharp\npublic class DeviceControllerTests : IClassFixture<WebApplicationFactory<Program>>\n{\n    private readonly WebApplicationFactory<Program> _factory;\n    private readonly HttpClient _client;\n\n    public DeviceControllerTests(WebApplicationFactory<Program> factory)\n    {\n        _factory = factory;\n        _client = _factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task GetDevice_WithValidId_ReturnsDevice()\n    {\n        // Arrange\n        var deviceId = 1;\n\n        // Act\n        var response = await _client.GetAsync($"/api/devices/{deviceId}");\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n        var content = await response.Content.ReadAsStringAsync();\n        var device = JsonSerializer.Deserialize<Device>(content);\n        \n        Assert.NotNull(device);\n        Assert.Equal(deviceId, device.Id);\n    }\n\n    [Fact]\n    public async Task CreateDevice_WithValidData_ReturnsCreated()\n    {\n        // Arrange\n        var newDevice = new CreateDeviceRequest\n        {\n            Name = "Test Device",\n            Location = "Test Location"\n        };\n        \n        var json = JsonSerializer.Serialize(newDevice);\n        var content = new StringContent(json, Encoding.UTF8, "application/json");\n\n        // Act\n        var response = await _client.PostAsync("/api/devices", content);\n\n        // Assert\n        Assert.Equal(HttpStatusCode.Created, response.StatusCode);\n    }\n}\n```\n\n**性能优化技巧：**\n```csharp\n// 1. 使用 AsNoTracking 进行只读查询\npublic async Task<IEnumerable<DeviceDto>> GetDevicesAsync()\n{\n    return await _context.Devices\n        .AsNoTracking()  // 提高性能\n        .Select(d => new DeviceDto\n        {\n            Id = d.Id,\n            Name = d.Name,\n            IsActive = d.IsActive\n        })\n        .ToListAsync();\n}\n\n// 2. 分页查询\npublic async Task<PagedResult<Device>> GetDevicesPagedAsync(int page, int pageSize)\n{\n    var totalCount = await _context.Devices.CountAsync();\n    \n    var devices = await _context.Devices\n        .OrderBy(d => d.Name)\n        .Skip((page - 1) * pageSize)\n        .Take(pageSize)\n        .ToListAsync();\n    \n    return new PagedResult<Device>\n    {\n        Items = devices,\n        TotalCount = totalCount,\n        PageNumber = page,\n        PageSize = pageSize\n    };\n}\n\n// 3. 批量操作\npublic async Task UpdateDeviceStatusesAsync(IEnumerable<int> deviceIds, bool isActive)\n{\n    await _context.Devices\n        .Where(d => deviceIds.Contains(d.Id))\n        .ExecuteUpdateAsync(d => d.SetProperty(p => p.IsActive, isActive));\n}\n```\n\n**本周目标：** 编写完整的测试套件，掌握测试驱动开发 (TDD) 基础，能够独立完成小型功能的开发。\n\n---\n\n**评估标准**\n\n每周结束时，您应该能够：\n- 第一周：在 VS Code 中熟练调试 C# 代码\n- 第二周：独立实现一个GET API端点\n- 第三周：独立实现一个POST/PUT API端点\n- 第四周：为自己的代码编写单元测试\n\n完成四周计划后，您将具备在 .NET 项目中独立开发功能的能力！',icon:(0,i.jsx)(c.Z,{className:"w-6 h-6"})},{id:"checklist",title:"成功转型的最终核对清单",content:"**\uD83D\uDD27 开发环境清单**\n\n✅ **Homebrew 和 VS Code 已安装**\n✅ **.NET SDK 已安装**: `dotnet --version` 显示 8.x.x\n✅ **C# Dev Kit 扩展已安装**: VS Code 中有解决方案资源管理器\n✅ **数据库环境已准备**: Docker + SQL Server 或 PostgreSQL\n✅ **第一个项目能够运行**: `dotnet run` 成功启动\n\n**\uD83D\uDCDA 语言掌握清单**\n\n✅ **属性 (Properties) 熟练运用**:\n• 理解自动属性 `{ get; set; }`\n• 会使用计算属性 `=> expression`\n• 理解只读属性和 `init` 访问器\n\n✅ **LINQ 查询熟练运用**:\n• 掌握基础查询操作 (Where, Select, OrderBy)\n• 理解延迟执行和立即执行\n• 会使用聚合函数 (Count, Sum, Average)\n\n✅ **异步编程熟练运用**:\n• 所有 I/O 操作使用 async/await\n• 理解 Task 和 Task<T>\n• 避免异步陷阱 (避免 .Result 和 .Wait())\n\n**\uD83C\uDFD7️ 框架掌握清单**\n\n✅ **ASP.NET Core 控制器**:\n• 能够创建基本的 CRUD 端点\n• 理解路由和模型绑定\n• 掌握状态码的正确使用\n\n✅ **依赖注入**:\n• 理解服务生命周期 (Singleton, Scoped, Transient)\n• 会在 Program.cs 中注册服务\n• 能够通过构造函数注入依赖\n\n✅ **Entity Framework Core**:\n• 能够定义 DbContext 和实体\n• 熟练使用 LINQ to Entities\n• 理解迁移工作流程\n\n**\uD83C\uDFAF 实践能力清单**\n\n✅ **阅读现有代码**:\n• 能够理解项目结构和架构\n• 会使用调试器跟踪代码执行\n• 理解仓储模式的实现\n\n✅ **编写新功能**:\n• 能够独立实现 GET 端点\n• 能够独立实现 POST/PUT 端点\n• 会进行基本的数据验证\n\n✅ **测试能力**:\n• 会编写基本的单元测试\n• 理解模拟 (Mocking) 的概念\n• 能够使用 xUnit 测试框架\n\n**\uD83D\uDE80 进阶技能清单**\n\n✅ **性能意识**:\n• 使用 AsNoTracking 进行只读查询\n• 实现分页查询\n• 理解 N+1 查询问题\n\n✅ **最佳实践**:\n• 遵循 RESTful API 设计原则\n• 使用 DTO 进行数据传输\n• 正确处理异常和错误\n\n✅ **团队协作**:\n• 理解 Git 工作流程\n• 会创建有意义的提交消息\n• 能够进行代码审查\n\n**\uD83C\uDF93 学习态度清单**\n\n✅ **持续学习心态**:\n• 定期查阅微软官方文档\n• 关注 .NET 社区和最新动态\n• 积极参与代码审查和技术讨论\n\n✅ **问题解决能力**:\n• 会使用调试器定位问题\n• 能够查找和理解错误消息\n• 善于利用 Stack Overflow 和官方文档\n\n✅ **实践驱动**:\n• 通过编写代码来学习概念\n• 不怕犯错，从错误中学习\n• 持续重构和改进代码质量\n\n**\uD83C\uDFC6 最终目标**\n\n完成所有清单项目后，您应该能够：\n\n\uD83C\uDFAF **独立开发小型功能**: 从需求分析到代码实现到测试\n\uD83C\uDFAF **参与代码审查**: 理解他人代码并提供建设性反馈\n\uD83C\uDFAF **解决常见问题**: 独立排查和解决开发中的问题\n\uD83C\uDFAF **持续学习**: 有能力学习更高级的 .NET 概念和框架\n\n**恭喜您！** \uD83C\uDF89 完成这个清单意味着您已经成功从 Java 开发者转变为合格的 .NET 开发者。您现在拥有了在现代 .NET 项目中进行有效贡献的所有基础技能！\n\n**下一步建议**:\n• 深入学习 ASP.NET Core 高级特性 (中间件、过滤器等)\n• 探索微服务架构和容器化部署\n• 学习前端技术 (Blazor 或与 React/Vue 集成)\n• 深入了解云平台 (Azure、AWS) 上的 .NET 部署",icon:(0,i.jsx)(r.Z,{className:"w-6 h-6"})}]}};function ContentSection(e){let{section:n,isExpanded:t,onToggle:s}=e;return(0,i.jsxs)("div",{id:n.id,className:"border border-secondary-200 rounded-lg overflow-hidden mb-6",children:[(0,i.jsxs)("button",{onClick:s,className:"w-full p-6 text-left hover:bg-secondary-50 transition-colors flex items-center justify-between",children:[(0,i.jsxs)("div",{className:"flex items-center",children:[(0,i.jsx)("div",{className:"w-10 h-10 bg-primary-100 rounded-lg flex items-center justify-center mr-4 text-primary-600",children:n.icon}),(0,i.jsx)("h3",{className:"text-lg font-semibold text-secondary-900",children:n.title})]}),(0,i.jsx)("div",{className:"flex-shrink-0 ml-4",children:t?(0,i.jsx)(l,{className:"w-5 h-5 text-secondary-400"}):(0,i.jsx)(u.Z,{className:"w-5 h-5 text-secondary-400"})})]}),t&&(0,i.jsx)("div",{className:"border-t border-secondary-200 bg-white",children:(0,i.jsx)("div",{className:"p-6 prose-custom",children:(0,i.jsx)("div",{dangerouslySetInnerHTML:{__html:n.content.replace(/\n/g,"<br>").replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>")}})})})]})}function CourseContent(){let[e,n]=(0,s.useState)(["1.1"]),toggleSection=e=>{n(n=>n.includes(e)?n.filter(n=>n!==e):[...n,e])};return(0,i.jsx)("section",{id:"course-content",className:"py-16 bg-secondary-50",children:(0,i.jsx)("div",{className:"container mx-auto px-6",children:(0,i.jsxs)("div",{className:"max-w-4xl mx-auto",children:[(0,i.jsxs)("div",{className:"text-center mb-12",children:[(0,i.jsx)("h2",{className:"text-3xl font-bold text-secondary-900 mb-4",children:"课程内容"}),(0,i.jsx)("p",{className:"text-lg text-secondary-600",children:"深入浅出，从Java开发者的视角学习C#/.NET"})]}),(0,i.jsxs)("div",{className:"mb-12",children:[(0,i.jsx)("h2",{className:"text-2xl font-bold text-secondary-900 mb-6 border-l-4 border-primary-500 pl-4",children:p.part1.title}),p.part1.content.map(n=>(0,i.jsx)(ContentSection,{section:n,isExpanded:e.includes(n.id),onToggle:()=>toggleSection(n.id)},n.id))]}),(0,i.jsxs)("div",{className:"mb-12",children:[(0,i.jsx)("h2",{className:"text-2xl font-bold text-secondary-900 mb-6 border-l-4 border-primary-500 pl-4",children:p.part2.title}),p.part2.content.map(n=>(0,i.jsx)(ContentSection,{section:n,isExpanded:e.includes(n.id),onToggle:()=>toggleSection(n.id)},n.id))]}),(0,i.jsxs)("div",{className:"mb-12",children:[(0,i.jsx)("h2",{className:"text-2xl font-bold text-secondary-900 mb-6 border-l-4 border-primary-500 pl-4",children:p.part3.title}),p.part3.content.map(n=>(0,i.jsx)(ContentSection,{section:n,isExpanded:e.includes(n.id),onToggle:()=>toggleSection(n.id)},n.id))]})]})})})}},94435:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return Hero}});var i=t(57437),s=t(62898);let r=(0,s.Z)("Laptop",[["path",{d:"M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16",key:"tarvll"}]]);var a=t(92455),c=t(9865);let o=(0,s.Z)("ArrowRight",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"m12 5 7 7-7 7",key:"xquz4c"}]]);function Hero(){return(0,i.jsx)("section",{className:"bg-gradient-to-br from-primary-50 via-white to-secondary-50 py-20",children:(0,i.jsx)("div",{className:"container mx-auto px-6",children:(0,i.jsxs)("div",{className:"max-w-4xl mx-auto text-center",children:[(0,i.jsxs)("h1",{className:"text-4xl md:text-6xl font-bold text-secondary-900 mb-6 leading-tight",children:["从Java到",(0,i.jsx)("span",{className:"text-primary-600 bg-gradient-to-r from-primary-600 to-primary-700 bg-clip-text text-transparent",children:"C#"})]}),(0,i.jsx)("p",{className:"text-xl md:text-2xl text-secondary-600 mb-8 leading-relaxed",children:"为资深开发者量身定制的.NET后端学习蓝图与实践指南"}),(0,i.jsx)("p",{className:"text-lg text-secondary-500 mb-12 max-w-3xl mx-auto",children:"利用您的Java经验，快速掌握C#/.NET生态系统。从macOS开发环境搭建到ASP.NET Core Web API， 从Entity Framework到现代异步编程模式，这份指南将助您平稳过渡到.NET世界。"}),(0,i.jsxs)("div",{className:"grid md:grid-cols-3 gap-8 mb-12",children:[(0,i.jsxs)("div",{className:"bg-white p-6 rounded-xl shadow-sm border border-secondary-100 hover:shadow-md transition-shadow",children:[(0,i.jsx)("div",{className:"w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-4 mx-auto",children:(0,i.jsx)(r,{className:"w-6 h-6 text-primary-600"})}),(0,i.jsx)("h3",{className:"font-semibold text-secondary-900 mb-2",children:"macOS原生支持"}),(0,i.jsx)("p",{className:"text-secondary-600 text-sm",children:"无需切换到Windows，在您熟悉的MacBook Pro上进行专业C#开发"})]}),(0,i.jsxs)("div",{className:"bg-white p-6 rounded-xl shadow-sm border border-secondary-100 hover:shadow-md transition-shadow",children:[(0,i.jsx)("div",{className:"w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-4 mx-auto",children:(0,i.jsx)(a.Z,{className:"w-6 h-6 text-primary-600"})}),(0,i.jsx)("h3",{className:"font-semibold text-secondary-900 mb-2",children:"实践导向"}),(0,i.jsx)("p",{className:"text-secondary-600 text-sm",children:"基于真实项目场景，从智能楼宇管理系统学习.NET最佳实践"})]}),(0,i.jsxs)("div",{className:"bg-white p-6 rounded-xl shadow-sm border border-secondary-100 hover:shadow-md transition-shadow",children:[(0,i.jsx)("div",{className:"w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-4 mx-auto",children:(0,i.jsx)(c.Z,{className:"w-6 h-6 text-primary-600"})}),(0,i.jsx)("h3",{className:"font-semibold text-secondary-900 mb-2",children:"系统性学习"}),(0,i.jsx)("p",{className:"text-secondary-600 text-sm",children:"从语言特性到框架应用，四周计划助您快速上手并贡献代码"})]})]}),(0,i.jsxs)("div",{className:"flex flex-col sm:flex-row gap-4 justify-center",children:[(0,i.jsxs)("a",{href:"#course-content",className:"bg-primary-600 hover:bg-primary-700 text-white px-8 py-4 rounded-lg font-medium transition-colors flex items-center justify-center gap-2 shadow-lg hover:shadow-xl",children:["开始学习",(0,i.jsx)(o,{className:"w-4 h-4"})]}),(0,i.jsxs)("a",{href:"/setup",className:"bg-green-600 hover:bg-green-700 text-white px-8 py-4 rounded-lg font-medium transition-colors flex items-center justify-center gap-2 shadow-lg hover:shadow-xl",children:["环境搭建指南",(0,i.jsx)(r,{className:"w-4 h-4"})]}),(0,i.jsxs)("a",{href:"/examples",className:"bg-purple-600 hover:bg-purple-700 text-white px-8 py-4 rounded-lg font-medium transition-colors flex items-center justify-center gap-2 shadow-lg hover:shadow-xl",children:["代码示例",(0,i.jsx)(a.Z,{className:"w-4 h-4"})]}),(0,i.jsx)("a",{href:"#table-of-contents",className:"border border-secondary-300 hover:border-secondary-400 text-secondary-700 px-8 py-4 rounded-lg font-medium transition-colors",children:"查看目录"})]})]})})})}},24093:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return TableOfContents}});var i=t(57437),s=t(2265),r=t(62898);let a=(0,r.Z)("Clock",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["polyline",{points:"12 6 12 12 16 14",key:"68esgv"}]]),c=(0,r.Z)("Target",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["circle",{cx:"12",cy:"12",r:"6",key:"1vlfrh"}],["circle",{cx:"12",cy:"12",r:"2",key:"1c9p78"}]]),o=(0,r.Z)("Users",[["path",{d:"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",key:"1yyitq"}],["circle",{cx:"9",cy:"7",r:"4",key:"nufk8"}],["path",{d:"M22 21v-2a4 4 0 0 0-3-3.87",key:"kshegd"}],["path",{d:"M16 3.13a4 4 0 0 1 0 7.75",key:"1da9ce"}]]);var d=t(83523),l=t(17158);let u=[{id:"part1",title:"第一部分: macOS上的现代C#开发环境",duration:"1周",subsections:[{id:"1.1",title:"Visual Studio for Mac的退役解读"},{id:"1.2",title:"Visual Studio Code与C# Dev Kit"},{id:"1.3",title:"macOS开发环境完整搭建指南"},{id:"1.4",title:"实践演练：创建第一个.NET项目"},{id:"1.5",title:"macOS是现代.NET开发的一等公民平台"}]},{id:"part2",title:"第二部分: 为资深Java开发者量身定制的C#/.NET课程",duration:"2-3周",subsections:[{id:"intro",title:"技术栈转换矩阵 (Java/Spring 到 C#/.NET)"},{id:"module1",title:"模块一：精通C#语言——超越Java的语法边界"},{id:"module2",title:"模块二：使用ASP.NET Core构建Web API"},{id:"module3",title:"模块三：Entity Framework Core与PostgreSQL"},{id:"module4",title:"模块四：实现项目中的核心模式"}]},{id:"part3",title:"第三部分: 战略路线图与建议",duration:"持续",subsections:[{id:"5.1",title:"四周贡献计划"},{id:"5.2",title:"成功转型的最终核对清单"}]}];function TableOfContents(){let[e,n]=(0,s.useState)(["part1"]),toggleSection=e=>{n(n=>n.includes(e)?n.filter(n=>n!==e):[...n,e])};return(0,i.jsx)("section",{id:"table-of-contents",className:"py-16 bg-white",children:(0,i.jsx)("div",{className:"container mx-auto px-6",children:(0,i.jsxs)("div",{className:"max-w-4xl mx-auto",children:[(0,i.jsxs)("div",{className:"text-center mb-12",children:[(0,i.jsx)("h2",{className:"text-3xl font-bold text-secondary-900 mb-4",children:"课程目录"}),(0,i.jsx)("p",{className:"text-lg text-secondary-600",children:"系统性的学习路径，从环境搭建到实际项目贡献"})]}),(0,i.jsxs)("div",{className:"grid md:grid-cols-3 gap-6 mb-12",children:[(0,i.jsxs)("div",{className:"bg-primary-50 p-6 rounded-xl text-center",children:[(0,i.jsx)(a,{className:"w-8 h-8 text-primary-600 mx-auto mb-3"}),(0,i.jsx)("div",{className:"text-2xl font-bold text-primary-700 mb-1",children:"4周"}),(0,i.jsx)("div",{className:"text-sm text-primary-600",children:"完整学习周期"})]}),(0,i.jsxs)("div",{className:"bg-green-50 p-6 rounded-xl text-center",children:[(0,i.jsx)(c,{className:"w-8 h-8 text-green-600 mx-auto mb-3"}),(0,i.jsx)("div",{className:"text-2xl font-bold text-green-700 mb-1",children:"3大模块"}),(0,i.jsx)("div",{className:"text-sm text-green-600",children:"核心技术领域"})]}),(0,i.jsxs)("div",{className:"bg-purple-50 p-6 rounded-xl text-center",children:[(0,i.jsx)(o,{className:"w-8 h-8 text-purple-600 mx-auto mb-3"}),(0,i.jsx)("div",{className:"text-2xl font-bold text-purple-700 mb-1",children:"Java开发者"}),(0,i.jsx)("div",{className:"text-sm text-purple-600",children:"目标学习群体"})]})]}),(0,i.jsx)("div",{className:"space-y-4",children:u.map(n=>(0,i.jsxs)("div",{className:"border border-secondary-200 rounded-lg overflow-hidden",children:[(0,i.jsxs)("button",{onClick:()=>toggleSection(n.id),className:"w-full p-6 text-left hover:bg-secondary-50 transition-colors flex items-center justify-between",children:[(0,i.jsxs)("div",{className:"flex-1",children:[(0,i.jsx)("h3",{className:"text-lg font-semibold text-secondary-900 mb-2",children:n.title}),(0,i.jsx)("span",{className:"inline-block bg-primary-100 text-primary-700 px-3 py-1 rounded-full text-sm font-medium",children:n.duration})]}),(0,i.jsx)("div",{className:"flex-shrink-0 ml-4",children:e.includes(n.id)?(0,i.jsx)(d.Z,{className:"w-5 h-5 text-secondary-400"}):(0,i.jsx)(l.Z,{className:"w-5 h-5 text-secondary-400"})})]}),e.includes(n.id)&&n.subsections&&(0,i.jsx)("div",{className:"border-t border-secondary-200 bg-secondary-50",children:(0,i.jsx)("div",{className:"p-6 space-y-3",children:n.subsections.map(e=>(0,i.jsx)("a",{href:"#".concat(e.id),className:"block p-3 rounded-lg hover:bg-white transition-colors group",children:(0,i.jsxs)("div",{className:"flex items-center",children:[(0,i.jsx)("div",{className:"w-2 h-2 bg-primary-400 rounded-full mr-3 group-hover:bg-primary-600"}),(0,i.jsx)("span",{className:"text-secondary-700 group-hover:text-secondary-900",children:e.title})]})},e.id))})})]},n.id))})]})})})}},30622:function(e,n,t){"use strict";/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i=t(2265),s=Symbol.for("react.element"),r=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,c=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function q(e,n,t){var i,r={},d=null,l=null;for(i in void 0!==t&&(d=""+t),void 0!==n.key&&(d=""+n.key),void 0!==n.ref&&(l=n.ref),n)a.call(n,i)&&!o.hasOwnProperty(i)&&(r[i]=n[i]);if(e&&e.defaultProps)for(i in n=e.defaultProps)void 0===r[i]&&(r[i]=n[i]);return{$$typeof:s,type:e,key:d,ref:l,props:r,_owner:c.current}}n.Fragment=r,n.jsx=q,n.jsxs=q},57437:function(e,n,t){"use strict";e.exports=t(30622)}},function(e){e.O(0,[971,472,744],function(){return e(e.s=12654)}),_N_E=e.O()}]);