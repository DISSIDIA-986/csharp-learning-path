(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[668],{4402:function(e,n,t){"use strict";t.d(n,{Z:function(){return c}});var i=t(2898);let c=(0,i.Z)("Code2",[["path",{d:"m18 16 4-4-4-4",key:"1inbqp"}],["path",{d:"m6 8-4 4 4 4",key:"15zrgr"}],["path",{d:"m14.5 4-5 16",key:"e7oirm"}]])},6433:function(e,n,t){Promise.resolve().then(t.bind(t,474)),Promise.resolve().then(t.t.bind(t,8326,23))},474:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return CodeExamples}});var i=t(7437),c=t(2265),s=t(4402),a=t(2898);let r=(0,a.Z)("Check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]]),o=(0,a.Z)("Copy",[["rect",{width:"14",height:"14",x:"8",y:"8",rx:"2",ry:"2",key:"17jyea"}],["path",{d:"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",key:"zix9uf"}]]),l=[{id:"properties-comparison",title:"Properties vs Getters/Setters",description:"C# 属性与 Java getters/setters 的对比",language:"csharp",category:"comparison",code:'// Java 风格\npublic class JavaDevice {\n    private String name;\n    private boolean active;\n    \n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    \n    public boolean isActive() { return active; }\n    public void setActive(boolean active) { this.active = active; }\n}\n\n// C# 风格\npublic class CSharpDevice \n{\n    public string Name { get; set; } = string.Empty;\n    public bool IsActive { get; set; }\n    \n    // 计算属性\n    public string Status => IsActive ? "在线" : "离线";\n    \n    // 带验证的属性\n    private int _id;\n    public int Id \n    { \n        get => _id;\n        set => _id = value > 0 ? value : throw new ArgumentException("ID必须大于0");\n    }\n}'},{id:"linq-vs-streams",title:"LINQ vs Java Streams",description:"数据查询操作的对比",language:"csharp",category:"comparison",code:"// Java Streams\nList<Device> activeDevices = devices.stream()\n    .filter(d -> d.isActive())\n    .sorted(Comparator.comparing(Device::getName))\n    .collect(Collectors.toList());\n\nMap<String, Long> devicesByLocation = devices.stream()\n    .collect(Collectors.groupingBy(\n        Device::getLocation, \n        Collectors.counting()));\n\n// C# LINQ - 方法语法\nvar activeDevices = devices\n    .Where(d => d.IsActive)\n    .OrderBy(d => d.Name)\n    .ToList();\n\nvar devicesByLocation = devices\n    .GroupBy(d => d.Location)\n    .ToDictionary(g => g.Key, g => g.Count());\n\n// C# LINQ - 查询语法 (类似 SQL)\nvar activeDevices = from d in devices\n                   where d.IsActive\n                   orderby d.Name\n                   select d;"},{id:"async-comparison",title:"异步编程对比",description:"Java CompletableFuture vs C# async/await",language:"csharp",category:"comparison",code:'// Java CompletableFuture\npublic CompletableFuture<Device> getDeviceAsync(int id) {\n    return CompletableFuture.supplyAsync(() -> {\n        return deviceRepository.findById(id);\n    }).thenCompose(device -> {\n        if (device.isPresent()) {\n            return CompletableFuture.completedFuture(device.get());\n        } else {\n            throw new DeviceNotFoundException("Device not found");\n        }\n    });\n}\n\n// C# async/await\npublic async Task<Device> GetDeviceAsync(int id)\n{\n    var device = await _deviceRepository.FindAsync(id);\n    \n    if (device == null)\n        throw new DeviceNotFoundException("Device not found");\n        \n    return device;\n}\n\n// 调用异步方法\n// Java\ndeviceService.getDeviceAsync(1)\n    .thenAccept(device -> System.out.println(device.getName()))\n    .exceptionally(ex -> {\n        System.err.println("Error: " + ex.getMessage());\n        return null;\n    });\n\n// C#\ntry \n{\n    var device = await deviceService.GetDeviceAsync(1);\n    Console.WriteLine(device.Name);\n}\ncatch (DeviceNotFoundException ex)\n{\n    Console.WriteLine($"Error: {ex.Message}");\n}'},{id:"controller-comparison",title:"Web API Controller 对比",description:"Spring Boot vs ASP.NET Core Controller",language:"csharp",category:"comparison",code:'// Spring Boot Controller\n@RestController\n@RequestMapping("/api/devices")\npublic class DeviceController {\n    \n    @Autowired\n    private DeviceService deviceService;\n    \n    @GetMapping("/{id}")\n    public ResponseEntity<Device> getDevice(@PathVariable Long id) {\n        Device device = deviceService.findById(id);\n        return device != null ? \n            ResponseEntity.ok(device) : \n            ResponseEntity.notFound().build();\n    }\n    \n    @PostMapping\n    public ResponseEntity<Device> createDevice(@RequestBody @Valid CreateDeviceRequest request) {\n        Device device = deviceService.create(request);\n        return ResponseEntity.status(HttpStatus.CREATED).body(device);\n    }\n}\n\n// ASP.NET Core Controller\n[ApiController]\n[Route("api/[controller]")]\npublic class DevicesController : ControllerBase\n{\n    private readonly IDeviceService _deviceService;\n    \n    public DevicesController(IDeviceService deviceService)\n    {\n        _deviceService = deviceService;\n    }\n    \n    [HttpGet("{id}")]\n    public async Task<ActionResult<Device>> GetDevice(int id)\n    {\n        var device = await _deviceService.GetByIdAsync(id);\n        return device == null ? NotFound() : Ok(device);\n    }\n    \n    [HttpPost]\n    public async Task<ActionResult<Device>> CreateDevice([FromBody] CreateDeviceRequest request)\n    {\n        var device = await _deviceService.CreateAsync(request);\n        return CreatedAtAction(nameof(GetDevice), new { id = device.Id }, device);\n    }\n}'},{id:"ef-core-example",title:"Entity Framework Core 查询",description:"复杂的数据库查询示例",language:"csharp",category:"csharp",code:"public class DeviceService\n{\n    private readonly BMSDataContext _context;\n    \n    public DeviceService(BMSDataContext context)\n    {\n        _context = context;\n    }\n    \n    // 基础查询\n    public async Task<Device?> GetDeviceAsync(int id)\n    {\n        return await _context.Devices.FindAsync(id);\n    }\n    \n    // 复杂查询与投影\n    public async Task<List<DeviceStatsDto>> GetDeviceStatsAsync()\n    {\n        return await _context.Devices\n            .Where(d => d.IsActive)\n            .Select(d => new DeviceStatsDto\n            {\n                Id = d.Id,\n                Name = d.Name,\n                TotalReadings = d.AcurevReadings.Count(),\n                AverageVoltage = d.AcurevReadings.Average(r => r.Voltage),\n                LastReading = d.AcurevReadings\n                    .OrderByDescending(r => r.Timestamp)\n                    .Select(r => r.Timestamp)\n                    .FirstOrDefault()\n            })\n            .ToListAsync();\n    }\n    \n    // 关联查询\n    public async Task<List<Device>> GetDevicesWithBuildingAsync(string buildingName)\n    {\n        return await _context.Devices\n            .Include(d => d.Building)\n            .Include(d => d.AcurevReadings.Take(10))\n            .Where(d => d.Building.Name == buildingName)\n            .ToListAsync();\n    }\n    \n    // 分页查询\n    public async Task<PagedResult<Device>> GetDevicesPagedAsync(int page, int pageSize)\n    {\n        var totalCount = await _context.Devices.CountAsync();\n        \n        var devices = await _context.Devices\n            .OrderBy(d => d.Name)\n            .Skip((page - 1) * pageSize)\n            .Take(pageSize)\n            .ToListAsync();\n            \n        return new PagedResult<Device>\n        {\n            Items = devices,\n            TotalCount = totalCount,\n            PageNumber = page,\n            PageSize = pageSize,\n            TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize)\n        };\n    }\n    \n    // 批量操作\n    public async Task UpdateDeviceStatusAsync(List<int> deviceIds, bool isActive)\n    {\n        await _context.Devices\n            .Where(d => deviceIds.Contains(d.Id))\n            .ExecuteUpdateAsync(d => d.SetProperty(p => p.IsActive, isActive));\n    }\n}"},{id:"testing-example",title:"xUnit 测试示例",description:"单元测试和集成测试的实际例子",language:"csharp",category:"csharp",code:'public class DeviceServiceTests\n{\n    private readonly Mock<IGenericRepository<Device>> _mockRepository;\n    private readonly Mock<ILogger<DeviceService>> _mockLogger;\n    private readonly DeviceService _service;\n\n    public DeviceServiceTests()\n    {\n        _mockRepository = new Mock<IGenericRepository<Device>>();\n        _mockLogger = new Mock<ILogger<DeviceService>>();\n        _service = new DeviceService(_mockRepository.Object, _mockLogger.Object);\n    }\n\n    [Fact]\n    public async Task GetDeviceAsync_WithValidId_ReturnsDevice()\n    {\n        // Arrange\n        var deviceId = 1;\n        var expectedDevice = new Device \n        { \n            Id = deviceId, \n            Name = "Test Device",\n            IsActive = true\n        };\n\n        _mockRepository\n            .Setup(r => r.GetByIdAsync(deviceId))\n            .ReturnsAsync(expectedDevice);\n\n        // Act\n        var result = await _service.GetDeviceAsync(deviceId);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(deviceId, result.Id);\n        Assert.Equal("Test Device", result.Name);\n        Assert.True(result.IsActive);\n    }\n\n    [Fact]\n    public async Task GetDeviceAsync_WithInvalidId_ThrowsException()\n    {\n        // Arrange\n        var deviceId = 999;\n        _mockRepository\n            .Setup(r => r.GetByIdAsync(deviceId))\n            .ReturnsAsync((Device?)null);\n\n        // Act & Assert\n        await Assert.ThrowsAsync<DeviceNotFoundException>(\n            () => _service.GetDeviceAsync(deviceId));\n    }\n\n    [Theory]\n    [InlineData(true, "在线")]\n    [InlineData(false, "离线")]\n    public void GetDeviceStatus_ReturnsCorrectStatus(bool isActive, string expectedStatus)\n    {\n        // Arrange\n        var device = new Device { IsActive = isActive };\n\n        // Act\n        var status = device.Status;\n\n        // Assert\n        Assert.Equal(expectedStatus, status);\n    }\n}\n\n// 集成测试示例\npublic class DeviceControllerIntegrationTests : IClassFixture<WebApplicationFactory<Program>>\n{\n    private readonly WebApplicationFactory<Program> _factory;\n    private readonly HttpClient _client;\n\n    public DeviceControllerIntegrationTests(WebApplicationFactory<Program> factory)\n    {\n        _factory = factory;\n        _client = _factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task GetDevices_ReturnsSuccessStatusCode()\n    {\n        // Act\n        var response = await _client.GetAsync("/api/devices");\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n        \n        var content = await response.Content.ReadAsStringAsync();\n        var devices = JsonSerializer.Deserialize<List<Device>>(content);\n        \n        Assert.NotNull(devices);\n    }\n}'}];function CodeExamples(){let[e,n]=(0,c.useState)("all"),[t,a]=(0,c.useState)(null),d=l.filter(n=>"all"===e||n.category===e),copyToClipboard=async(e,n)=>{try{await navigator.clipboard.writeText(e),a(n),setTimeout(()=>a(null),2e3)}catch(e){console.error("Failed to copy code:",e)}};return(0,i.jsxs)("div",{className:"max-w-6xl mx-auto p-6",children:[(0,i.jsxs)("div",{className:"mb-8",children:[(0,i.jsx)("h2",{className:"text-3xl font-bold text-secondary-900 mb-4",children:"代码示例库"}),(0,i.jsx)("p",{className:"text-lg text-secondary-600 mb-6",children:"Java 与 C# 的实际代码对比，以及 .NET 开发的最佳实践"}),(0,i.jsx)("div",{className:"flex flex-wrap gap-2",children:[{key:"all",label:"全部示例"},{key:"comparison",label:"Java vs C#"},{key:"csharp",label:"C# 专用"}].map(t=>(0,i.jsx)("button",{onClick:()=>n(t.key),className:"px-4 py-2 rounded-lg font-medium transition-colors ".concat(e===t.key?"bg-primary-600 text-white":"bg-secondary-100 text-secondary-700 hover:bg-secondary-200"),children:t.label},t.key))})]}),(0,i.jsx)("div",{className:"space-y-8",children:d.map(e=>(0,i.jsxs)("div",{className:"bg-white rounded-lg border border-secondary-200 overflow-hidden",children:[(0,i.jsx)("div",{className:"p-6 border-b border-secondary-200",children:(0,i.jsxs)("div",{className:"flex items-start justify-between",children:[(0,i.jsxs)("div",{className:"flex-1",children:[(0,i.jsxs)("div",{className:"flex items-center mb-2",children:[(0,i.jsx)(s.Z,{className:"w-5 h-5 text-primary-600 mr-2"}),(0,i.jsx)("h3",{className:"text-xl font-semibold text-secondary-900",children:e.title}),(0,i.jsx)("span",{className:"ml-3 px-2 py-1 rounded-full text-xs font-medium ".concat("comparison"===e.category?"bg-blue-100 text-blue-700":"bg-green-100 text-green-700"),children:"comparison"===e.category?"对比":"C# 示例"})]}),(0,i.jsx)("p",{className:"text-secondary-600",children:e.description})]}),(0,i.jsx)("button",{onClick:()=>copyToClipboard(e.code,e.id),className:"flex items-center gap-2 px-3 py-2 bg-secondary-100 hover:bg-secondary-200 rounded-lg transition-colors ml-4",children:t===e.id?(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r,{className:"w-4 h-4 text-green-600"}),(0,i.jsx)("span",{className:"text-sm text-green-600",children:"已复制"})]}):(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o,{className:"w-4 h-4 text-secondary-600"}),(0,i.jsx)("span",{className:"text-sm text-secondary-600",children:"复制代码"})]})})]})}),(0,i.jsx)("div",{className:"relative",children:(0,i.jsx)("pre",{className:"bg-secondary-900 text-secondary-100 p-6 overflow-x-auto",children:(0,i.jsx)("code",{className:"font-mono text-sm leading-relaxed",children:e.code})})})]},e.id))}),0===d.length&&(0,i.jsxs)("div",{className:"text-center py-12",children:[(0,i.jsx)(s.Z,{className:"w-12 h-12 text-secondary-400 mx-auto mb-4"}),(0,i.jsx)("p",{className:"text-secondary-600",children:"该分类下暂无代码示例"})]})]})}}},function(e){e.O(0,[946,971,472,744],function(){return e(e.s=6433)}),_N_E=e.O()}]);